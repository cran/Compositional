#useDynLib(Compositional, .registration = TRUE)

importFrom("MASS", cov.rob, cov.trob)

importFrom("graphics", filled.contour, contour, lines, plot, axis, par,
           points, abline, hist, legend, text, image, segments, mtext)

importFrom("stats", cor, lm, cov, optim, optimize, quantile, rnorm, sd, cmdscale,
           qnorm, nlminb, nlm, lm.fit, rchisq, deviance, pchisq, qchisq, rgamma,
           mahalanobis, runif, qt, qf, pf, model.matrix, prcomp, .lm.fit, na.omit,
           ppr, predict, coef, cancor, loess, fitted, as.dist, rweibull, ks.test,
           rmultinom, quasibinomial)

importFrom("grDevices", terrain.colors, grey, colorRampPalette)

importFrom("Rfast", colVars, colMedians, colmeans, colsums, rowmeans, rowsums,
           diri.nr2, colSort, mahala, rmvnorm, rmvt, sort_unique, rowMins,
           rowMaxs, Dist, spat.med, lmfit, dista, Log, Var, knn, knn.cv, cova,
           glm_logistic, glm_poisson, colhameans, spdinv, colnth, Table, Order,
           eachrow, sscov, beta.mle, ibeta.mle, hsecant01.mle, logitnorm.mle,
		       prop.reg, prop.regs, spatmed.reg, dcor, squareform, gammanb, Rnorm,
		       dmvnorm, dmvt, normlog.reg)

importFrom("Rfast2", kumar.mle, propols.reg, prophelling.reg, zil.mle,
           beta.nb, logitnorm.nb, cauchy.nb, laplace.nb, normlog.nb, weibull.nb,
           pca, unitweibull.mle, colbeta.mle, collogitnorm.mle, colunitweibull.mle,
           rbeta1, colGroup, Sample.int, Sample, Runif, gammareg, censweib.reg,
           negbin.reg, colaccs, colmses, pcr)

importFrom("quadprog", solve.QP)
importFrom("Matrix", nearPD)
importFrom("Rnanoflann", nn)
importFrom("mda", fda)
importFrom("sn", msn.mle, rmsn)
importFrom("mixture", gpcm)
importFrom("emplik", el.test)
importFrom("nnet", multinom)
importFrom("glmnet", glmnet, cv.glmnet)
importFrom("energy", eqdist.etest)
importFrom("cluster", ellipsoidhull)
importFrom("minpack.lm", nls.lm, nls.lm.control)
importFrom("quantreg", rq)
importFrom("bigstatsr", big_crossprodSelf, big_apply, big_cprodMat, FBM, big_read)

import("doParallel")
import("parallel")
import("foreach")

exportPattern("^[[:alpha:]]+")
exportPattern("^[^\\.]")
export(.onAttach)

